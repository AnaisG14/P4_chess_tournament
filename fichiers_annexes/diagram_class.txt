@startuml
Rectangle Models{
class Tournament {
{class} manager [instance de TournamentManager]
tournament_name [str]
tournament_place [str]
laps_number [default=4]
time_controller [str : bullet, blitz or rapid]
manager_description [str]
start_date [str]
end_date [str]
laps_name [list of laps name]
laps [list of instance of laps]
players [list of instance of Players]
players_scores [list of list[Player, score]]
results [list of list[Player, score]]
date [tuple : start_date, end_date]
serialized_start_date
serialized_end_date
serialized_laps
serialized_players
serialized_players_scores
serialized_results
save_tournament [instance de ManagementDB

create_laps_name()
display_results()
add_player(player)
add_laps(lap)
serialize()
save()
{class} get_one(serialized_tournament)
}

class Lap {
{class} manager [instance de LapManager]
lap_name [str]
matches [list of instance Match]
datetime_start [autocomplétion à la création du round]
datetime_end [autocomplétion à la fin du round]

add_match() [ajoute un match à la list de matches]
add_end_time() [ajoute la date et l'heure de fin de round]
serialize()
{class}get()
}

class Player {
{class} manager [instance de PlayerManager]
first_name [str]
last_name [str]
birthday [str]
sexe [str]
ranking [positive number]

add_tournament(name_tournament)
modify_ranking(new_ranking)
serialize()
save()
{class} get(serialized_player)
{class} get_all()
}

class ManagementDB {
db [instance TinyDb]
tournanents_table
players_table

get(table)
save(table, to_save)
clear_tournament()
modifiy_player_ranking(last_name, firs_name, birthday)
}

class Match {
{class} manager [instance de MatchManager]
opponents [tuple of list :player,score]
winner [str gagnat du match
modify_score() [V=1, D=0, N=1/2]
serialize()
{class}get()
}

class HomeMenu {
menu_entries [dict]
auto_key [int]
add_item() [-> ajoute des choix au menu]
}
}

Rectangle Vue {
Class TournamentView {
display_information_tournament(objet Tournament)
}

Class PlayerView {
display_information_player(objet Player)
}

class CreateTournamentView {
information_tournament [dict]
ask_information()
add_information()
}

class ClassementView {
display_classement() [en lien avec ClassementModel]
}
}

Rectangle Controllers {
class CreateTournament {
None
verify_view() [CreateTournamentView]
add_information_model() [TournmentModel]
}

class CreateRound {
player_list [lien avec Tournament et Player]
generate_matches()
modify_RoundModel()
}

class DisplayClassement {
}
}
@enduml
